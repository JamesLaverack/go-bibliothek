// Package bibliothek provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package bibliothek

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for BuildResponseChannel.
const (
	BuildResponseChannelDefault      BuildResponseChannel = "default"
	BuildResponseChannelExperimental BuildResponseChannel = "experimental"
)

// Defines values for VersionBuildChannel.
const (
	VersionBuildChannelDefault      VersionBuildChannel = "default"
	VersionBuildChannelExperimental VersionBuildChannel = "experimental"
)

// Defines values for VersionFamilyBuildChannel.
const (
	Default      VersionFamilyBuildChannel = "default"
	Experimental VersionFamilyBuildChannel = "experimental"
)

// BuildResponse defines model for BuildResponse.
type BuildResponse struct {
	Build       *int32                   `json:"build,omitempty"`
	Changes     *[]Change                `json:"changes,omitempty"`
	Channel     *BuildResponseChannel    `json:"channel,omitempty"`
	Downloads   *BuildResponse_Downloads `json:"downloads,omitempty"`
	ProjectId   *string                  `json:"project_id,omitempty"`
	ProjectName *string                  `json:"project_name,omitempty"`
	Promoted    *bool                    `json:"promoted,omitempty"`
	Time        *time.Time               `json:"time,omitempty"`
	Version     *string                  `json:"version,omitempty"`
}

// BuildResponseChannel defines model for BuildResponse.Channel.
type BuildResponseChannel string

// BuildResponse_Downloads defines model for BuildResponse.Downloads.
type BuildResponse_Downloads struct {
	AdditionalProperties map[string]Download `json:"-"`
}

// BuildsResponse defines model for BuildsResponse.
type BuildsResponse struct {
	Builds      *[]VersionBuild `json:"builds,omitempty"`
	ProjectId   *string         `json:"project_id,omitempty"`
	ProjectName *string         `json:"project_name,omitempty"`
	Version     *string         `json:"version,omitempty"`
}

// Change defines model for Change.
type Change struct {
	Commit  *string `json:"commit,omitempty"`
	Message *string `json:"message,omitempty"`
	Summary *string `json:"summary,omitempty"`
}

// Download defines model for Download.
type Download struct {
	Name   *string `json:"name,omitempty"`
	Sha256 *string `json:"sha256,omitempty"`
}

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	ProjectId     *string   `json:"project_id,omitempty"`
	ProjectName   *string   `json:"project_name,omitempty"`
	VersionGroups *[]string `json:"version_groups,omitempty"`
	Versions      *[]string `json:"versions,omitempty"`
}

// ProjectsResponse defines model for ProjectsResponse.
type ProjectsResponse struct {
	Projects *[]string `json:"projects,omitempty"`
}

// VersionBuild defines model for VersionBuild.
type VersionBuild struct {
	Build     *int32                  `json:"build,omitempty"`
	Changes   *[]Change               `json:"changes,omitempty"`
	Channel   *VersionBuildChannel    `json:"channel,omitempty"`
	Downloads *VersionBuild_Downloads `json:"downloads,omitempty"`
	Promoted  *bool                   `json:"promoted,omitempty"`
	Time      *time.Time              `json:"time,omitempty"`
}

// VersionBuildChannel defines model for VersionBuild.Channel.
type VersionBuildChannel string

// VersionBuild_Downloads defines model for VersionBuild.Downloads.
type VersionBuild_Downloads struct {
	AdditionalProperties map[string]Download `json:"-"`
}

// VersionFamilyBuild defines model for VersionFamilyBuild.
type VersionFamilyBuild struct {
	Build     *int32                        `json:"build,omitempty"`
	Changes   *[]Change                     `json:"changes,omitempty"`
	Channel   *VersionFamilyBuildChannel    `json:"channel,omitempty"`
	Downloads *VersionFamilyBuild_Downloads `json:"downloads,omitempty"`
	Promoted  *bool                         `json:"promoted,omitempty"`
	Time      *time.Time                    `json:"time,omitempty"`
	Version   *string                       `json:"version,omitempty"`
}

// VersionFamilyBuildChannel defines model for VersionFamilyBuild.Channel.
type VersionFamilyBuildChannel string

// VersionFamilyBuild_Downloads defines model for VersionFamilyBuild.Downloads.
type VersionFamilyBuild_Downloads struct {
	AdditionalProperties map[string]Download `json:"-"`
}

// VersionFamilyBuildsResponse defines model for VersionFamilyBuildsResponse.
type VersionFamilyBuildsResponse struct {
	Builds       *[]VersionFamilyBuild `json:"builds,omitempty"`
	ProjectId    *string               `json:"project_id,omitempty"`
	ProjectName  *string               `json:"project_name,omitempty"`
	VersionGroup *string               `json:"version_group,omitempty"`
	Versions     *[]string             `json:"versions,omitempty"`
}

// VersionFamilyResponse defines model for VersionFamilyResponse.
type VersionFamilyResponse struct {
	ProjectId    *string   `json:"project_id,omitempty"`
	ProjectName  *string   `json:"project_name,omitempty"`
	VersionGroup *string   `json:"version_group,omitempty"`
	Versions     *[]string `json:"versions,omitempty"`
}

// VersionResponse defines model for VersionResponse.
type VersionResponse struct {
	Builds      *[]int32 `json:"builds,omitempty"`
	ProjectId   *string  `json:"project_id,omitempty"`
	ProjectName *string  `json:"project_name,omitempty"`
	Version     *string  `json:"version,omitempty"`
}

// Getter for additional properties for BuildResponse_Downloads. Returns the specified
// element and whether it was found
func (a BuildResponse_Downloads) Get(fieldName string) (value Download, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for BuildResponse_Downloads
func (a *BuildResponse_Downloads) Set(fieldName string, value Download) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Download)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for BuildResponse_Downloads to handle AdditionalProperties
func (a *BuildResponse_Downloads) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Download)
		for fieldName, fieldBuf := range object {
			var fieldVal Download
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for BuildResponse_Downloads to handle AdditionalProperties
func (a BuildResponse_Downloads) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VersionBuild_Downloads. Returns the specified
// element and whether it was found
func (a VersionBuild_Downloads) Get(fieldName string) (value Download, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VersionBuild_Downloads
func (a *VersionBuild_Downloads) Set(fieldName string, value Download) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Download)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VersionBuild_Downloads to handle AdditionalProperties
func (a *VersionBuild_Downloads) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Download)
		for fieldName, fieldBuf := range object {
			var fieldVal Download
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VersionBuild_Downloads to handle AdditionalProperties
func (a VersionBuild_Downloads) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for VersionFamilyBuild_Downloads. Returns the specified
// element and whether it was found
func (a VersionFamilyBuild_Downloads) Get(fieldName string) (value Download, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for VersionFamilyBuild_Downloads
func (a *VersionFamilyBuild_Downloads) Set(fieldName string, value Download) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]Download)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for VersionFamilyBuild_Downloads to handle AdditionalProperties
func (a *VersionFamilyBuild_Downloads) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]Download)
		for fieldName, fieldBuf := range object {
			var fieldVal Download
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for VersionFamilyBuild_Downloads to handle AdditionalProperties
func (a VersionFamilyBuild_Downloads) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Projects request
	Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Project request
	Project(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Family request
	Family(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FamilyBuilds request
	FamilyBuilds(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Version request
	Version(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Builds request
	Builds(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Build request
	Build(ctx context.Context, project string, version string, build int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Download request
	Download(ctx context.Context, project string, version string, build int32, download string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Projects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Project(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProjectRequest(c.Server, project)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Family(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFamilyRequest(c.Server, project, family)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FamilyBuilds(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFamilyBuildsRequest(c.Server, project, family)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Version(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVersionRequest(c.Server, project, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Builds(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildsRequest(c.Server, project, version)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Build(ctx context.Context, project string, version string, build int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBuildRequest(c.Server, project, version, build)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Download(ctx context.Context, project string, version string, build int32, download string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadRequest(c.Server, project, version, build, download)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewProjectsRequest generates requests for Projects
func NewProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProjectRequest generates requests for Project
func NewProjectRequest(server string, project string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFamilyRequest generates requests for Family
func NewFamilyRequest(server string, project string, family string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "family", runtime.ParamLocationPath, family)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s/version_group/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFamilyBuildsRequest generates requests for FamilyBuilds
func NewFamilyBuildsRequest(server string, project string, family string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "family", runtime.ParamLocationPath, family)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s/version_group/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVersionRequest generates requests for Version
func NewVersionRequest(server string, project string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildsRequest generates requests for Builds
func NewBuildsRequest(server string, project string, version string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s/versions/%s/builds", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBuildRequest generates requests for Build
func NewBuildRequest(server string, project string, version string, build int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "build", runtime.ParamLocationPath, build)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s/versions/%s/builds/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadRequest generates requests for Download
func NewDownloadRequest(server string, project string, version string, build int32, download string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "project", runtime.ParamLocationPath, project)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "build", runtime.ParamLocationPath, build)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "download", runtime.ParamLocationPath, download)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/projects/%s/versions/%s/builds/%s/downloads/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Projects request
	ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProjectsResponse, error)

	// Project request
	ProjectWithResponse(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*ProjectResponse, error)

	// Family request
	FamilyWithResponse(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*FamilyResponse, error)

	// FamilyBuilds request
	FamilyBuildsWithResponse(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*FamilyBuildsResponse, error)

	// Version request
	VersionWithResponse(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*VersionResponse, error)

	// Builds request
	BuildsWithResponse(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*BuildsResponse, error)

	// Build request
	BuildWithResponse(ctx context.Context, project string, version string, build int32, reqEditors ...RequestEditorFn) (*BuildResponse, error)

	// Download request
	DownloadWithResponse(ctx context.Context, project string, version string, build int32, download string, reqEditors ...RequestEditorFn) (*DownloadResponse, error)
}

type ProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectsResponse
}

// Status returns HTTPResponse.Status
func (r ProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectResponse
}

// Status returns HTTPResponse.Status
func (r ProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FamilyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionFamilyResponse
}

// Status returns HTTPResponse.Status
func (r FamilyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FamilyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FamilyBuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionFamilyBuildsResponse
}

// Status returns HTTPResponse.Status
func (r FamilyBuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FamilyBuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VersionResponse
}

// Status returns HTTPResponse.Status
func (r VersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildsResponse
}

// Status returns HTTPResponse.Status
func (r BuildsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BuildResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BuildResponse
}

// Status returns HTTPResponse.Status
func (r BuildResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BuildResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ProjectsWithResponse request returning *ProjectsResponse
func (c *ClientWithResponses) ProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ProjectsResponse, error) {
	rsp, err := c.Projects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectsResponse(rsp)
}

// ProjectWithResponse request returning *ProjectResponse
func (c *ClientWithResponses) ProjectWithResponse(ctx context.Context, project string, reqEditors ...RequestEditorFn) (*ProjectResponse, error) {
	rsp, err := c.Project(ctx, project, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProjectResponse(rsp)
}

// FamilyWithResponse request returning *FamilyResponse
func (c *ClientWithResponses) FamilyWithResponse(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*FamilyResponse, error) {
	rsp, err := c.Family(ctx, project, family, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFamilyResponse(rsp)
}

// FamilyBuildsWithResponse request returning *FamilyBuildsResponse
func (c *ClientWithResponses) FamilyBuildsWithResponse(ctx context.Context, project string, family string, reqEditors ...RequestEditorFn) (*FamilyBuildsResponse, error) {
	rsp, err := c.FamilyBuilds(ctx, project, family, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFamilyBuildsResponse(rsp)
}

// VersionWithResponse request returning *VersionResponse
func (c *ClientWithResponses) VersionWithResponse(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*VersionResponse, error) {
	rsp, err := c.Version(ctx, project, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVersionResponse(rsp)
}

// BuildsWithResponse request returning *BuildsResponse
func (c *ClientWithResponses) BuildsWithResponse(ctx context.Context, project string, version string, reqEditors ...RequestEditorFn) (*BuildsResponse, error) {
	rsp, err := c.Builds(ctx, project, version, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildsResponse(rsp)
}

// BuildWithResponse request returning *BuildResponse
func (c *ClientWithResponses) BuildWithResponse(ctx context.Context, project string, version string, build int32, reqEditors ...RequestEditorFn) (*BuildResponse, error) {
	rsp, err := c.Build(ctx, project, version, build, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBuildResponse(rsp)
}

// DownloadWithResponse request returning *DownloadResponse
func (c *ClientWithResponses) DownloadWithResponse(ctx context.Context, project string, version string, build int32, download string, reqEditors ...RequestEditorFn) (*DownloadResponse, error) {
	rsp, err := c.Download(ctx, project, version, build, download, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadResponse(rsp)
}

// ParseProjectsResponse parses an HTTP response from a ProjectsWithResponse call
func ParseProjectsResponse(rsp *http.Response) (*ProjectsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseProjectResponse parses an HTTP response from a ProjectWithResponse call
func ParseProjectResponse(rsp *http.Response) (*ProjectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFamilyResponse parses an HTTP response from a FamilyWithResponse call
func ParseFamilyResponse(rsp *http.Response) (*FamilyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FamilyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionFamilyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFamilyBuildsResponse parses an HTTP response from a FamilyBuildsWithResponse call
func ParseFamilyBuildsResponse(rsp *http.Response) (*FamilyBuildsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FamilyBuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionFamilyBuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseVersionResponse parses an HTTP response from a VersionWithResponse call
func ParseVersionResponse(rsp *http.Response) (*VersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VersionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBuildsResponse parses an HTTP response from a BuildsWithResponse call
func ParseBuildsResponse(rsp *http.Response) (*BuildsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBuildResponse parses an HTTP response from a BuildWithResponse call
func ParseBuildResponse(rsp *http.Response) (*BuildResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BuildResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BuildResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDownloadResponse parses an HTTP response from a DownloadWithResponse call
func ParseDownloadResponse(rsp *http.Response) (*DownloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (application/java-archive) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
